openapi: 3.0.0

info:
  version: 1.0.0
  title: Transaction Service
  description: This is a Transaction Service YAML

servers:
  - url: http://localhost:8080
    description: Local machine
tags:
  - name: "System"
    description: All system methods
  - name: "User"

paths:
  /api/system/health:
    get:
      summary: This is a healtheck method
      description: This method returns a 200 respponse for healthceck purposes
      tags:
        - "System"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: string
  /api/system/info:
    get:
      summary: This is a version method
      description: This method returns the current application version
      tags:
        - "System"
      responses:
        "200":
          $ref: "#/components/responses/SystemInfoResponse"
  /api/users:
    get:
      summary: return a list of users whose username contains the sting
      tags:
        - "User"
      operationId: getUsersByUsername
      security:
        - BearerAuth: [ ]
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
            description: search-string
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts/{accountId}:
    get:
      summary: Get account information by ID
      tags:
        - "User"
      operationId: getAccountById
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: Account ID
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts:
    get:
      summary: Get a list of accounts for a user
      description: Returns a list of accounts for the user (only id, name, and currency)
      tags:
        - "User"
      operationId: getUserAccounts
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          description: ID of the user
          schema:
            type: integer
            format: int64
            minimum: 1
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
    post:
      summary: Creates an account for the user with the provided information
      tags:
        - "User"
      operationId: createAccount
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID
      requestBody:
        description: Account information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountCreateRequest"
      responses:
        "201":
          description: "Created"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts/{accountId}/transactions:
    get:
      summary: Get the list of transactions for a user's account
      tags:
        - "User"
      operationId: getAccountTransactions
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: Account ID
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TransactionListResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts/{accountId}/deposit:
    post:
      summary: Mock implementation of integration with payment system - Deposit amount to account
      tags:
        - "User"
      operationId: depositToAccount
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: Account ID
      requestBody:
        description: Deposit information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/DepositRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts/{accountId}/withdraw:
    post:
      summary: Mock implementation of integration with banking system - Withdraw amount from account
      tags:
        - "User"
      operationId: withdrawFromAccount
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: Account ID
      requestBody:
        description: Withdrawal information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/WithdrawalRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
  /api/users/{userId}/accounts/{accountId}/transfer:
    post:
      summary: Transfer amount from one user's account to another
      tags:
        - "User"
      operationId: transferAmount
      security:
        - BearerAuth: [ ]
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: User ID of the sending user
        - name: accountId
          in: path
          required: true
          schema:
            type: integer
            format: int64
            minimum: 1
            description: Account ID of the sending user
      requestBody:
        description: Deposit information
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TransferRequest"
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AccountInfoResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalServerError"
components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    InfoHolder:
      description: This is a object holding the version information
      type: object
      properties:
        appBuildversion:
          type: string
        appBuildTime:
          type: string
    ErrorResponse:
      description: This is the response object in case of errors, compliant with RFC7807
      type: object
      properties:
        error:
          $ref: "#/components/schemas/ErrorData"
    ErrorData:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        status:
          type: integer
        detail:
          type: string
    User:
      description: This is the user module
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        firstName:
          type: string
        lastName:
          type: string
    AccountListResponse:
      type: object
      description: Response containing account data and error information.
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Account"
        error:
          $ref: "#/components/schemas/ErrorData"
    AccountCreateRequest:
      type: object
      properties:
        name:
          type: string
          description: Name for the account
        cardNumber:
          type: string
          description: Credit/debit card number
        iban:
          type: string
          description: International Bank Account Number (IBAN)
        currency:
          type: string
          description: Currency code (ISO code)
      required:
        - name
        - cardNumber
        - iban
        - currency
    WithdrawalRequest:
      type: object
      properties:
        nonce:
          type: string
          description: Generated UUID for the withdrawal
        securityCode:
          type: string
          description: Security code of the card
        amount:
          type: number
          description: Amount to be withdrawn
      required:
        - nonce
        - securityCode
        - amount
    DepositRequest:
      type: object
      properties:
        nonce:
          type: string
          description: Generated UUID for the deposit
        amount:
          type: number
          description: Amount to be deposited
      required:
        - nonce
        - amount
    AccountInfo:
      type: object
      properties:
        accountId:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        currency:
          type: string
        nonce:
          type: string
        securityCode:
          type: string
          description: Security code of the card
        amountToSend:
          type: number
        balance:
          type: number
        previous balance:
          type: number
    AccountInfoResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/AccountInfo"
        error:
          $ref: "#/components/schemas/ErrorData"
    Account:
      description: This is an Account object
      type: object
      properties:
        accountId:
          type: integer
          format: int64
          minimum: 1
        name:
          type: string
        currency:
          type: string
    AccountResponse:
      type: object
      properties:
        data:
          $ref: "#/components/schemas/Account"
        error:
          $ref: "#/components/schemas/ErrorData"
    UserListResponse:
      type: object
      properties:
         data:
           type: array
           items:
            $ref: "#/components/schemas/User"
         error:
          $ref: "#/components/schemas/ErrorData"
    TransferRequest:
      type: object
      properties:
        nonce:
          type: string
          description: Generated UUID for the transfer
        amount:
          type: number
          description: Amount to be transferred
        recipientUserId:
          type: integer
          format: int64
          minimum: 1
          description: User ID of the receiving user
      required:
        - nonce
        - amount
        - recipientUserId
    TransactionListResponse:
      type: object
      properties:
        data:
          type: array
          items:
            $ref: "#/components/schemas/Transaction"
        error:
          $ref: "#/components/schemas/ErrorData"
    Transaction:
      type: object
      properties:
        id:
          type: integer
          format: int64
          minimum: 1
        timestamp:
          type: string
          format: date-time
        nonce:
          type: string
        change:
          type: number
        previousBalance:
          type: number
        type:
          type: string
        transferUserId:
          type: integer
          format: int64
          minimum: 1
  responses:
    SystemInfoResponse:
      description: "System Version Response"
      content:
        application/json:
          schema:
            type: object
            properties:
              data:
                $ref: "#/components/schemas/InfoHolder"
    BadRequest:
      description: "BAD REQUEST"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Unauthorized:
      description: "UNAUTHORIZED"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    Forbidden:
      description: "FORBIDDEN"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    NotFound:
      description: "NOT FOUND"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
    InternalServerError:
      description: "INTERNAL SERVER ERROR"
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrorResponse"
security:
  - BearerAuth: [ ]
